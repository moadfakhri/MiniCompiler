#pragma once

typedef enum ERRORS ERRORS;

enum ERRORS
{
	ERR_PROGRAM,ERR_ID,ERR_CONST,ERR_VAR,ERR_EQUAL,ERR_NUM,ERR_SEMICOLON,ERR_COMMA,ERR_END,
	ERR_PERIOD, ERR_BEGIN, ERR_IF, ERR_THEN, ERR_WHILE,ERR_DO, ERR_READ, ERR_LEFT_PARENT, ERR_RIGHT_PARENT, ERR_WRITE,
	ERR_AFFECT, ERR_DIFF, ERR_LESS, ERR_GREATER, ERR_LESS_EQ, ERR_GREATER_EQ, ERR_PLUS, ERR_MINUS, ERR_MULT, ERR_DIV, ERR_COMPARISON,

	NUMBER_OF_ENUM
};

char *erro_messages[NUMBER_OF_ENUM];
/*
	ERR_PROGRAM ERR_ID ERR_CONST ERR_VAR ERR_EQUAL ERR_NUM ERR_SEMICOLON ERR_COMMA ERR_END
	ERR_PERIOD ERR_BEGIN ERR_IF ERR_THEN ERR_WHILE ERR_DO ERR_READ ERR_LEFT_PARENT ERR_RIGHT_PARENT ERR_WRITE
	ERR_AFFECT ERR_DIFF ERR_LESS ERR_GREATER ERR_LESS_EQ ERR_GREATER_EQ ERR_PLUS ERR_MINUS ERR_MULT ERR_DIV
*/
void init_error_messages()
{
	erro_messages[ERR_PROGRAM] = "SYNTAX ERROR, EXPECTED PROGRAM";
	erro_messages[ERR_ID] = "SYNTAX ERROR, EXPECTED ID";
	erro_messages[ERR_CONST] = "SYNTAX ERROR, EXPECTED CONST";
	erro_messages[ERR_VAR] = "SYNTAX ERROR, EXPECTED VAR";
	erro_messages[ERR_EQUAL] = "SYNTAX ERROR, EXPECTED EQUAL";
	erro_messages[ERR_NUM] = "SYNTAX ERROR, EXPECTED NUM";
	erro_messages[ERR_SEMICOLON] = "SYNTAX ERROR, EXPECTED SEMICOLON";
	erro_messages[ERR_COMMA] = "SYNTAX ERROR, EXPECTED COMMA";
	erro_messages[ERR_END] = "SYNTAX ERROR, EXPECTED END";
	erro_messages[ERR_PERIOD] = "SYNTAX ERROR, EXPECTED PERIOD";
	erro_messages[ERR_BEGIN] = "SYNTAX ERROR, EXPECTED BEGIN";
	erro_messages[ERR_IF] = "SYNTAX ERROR, EXPECTED IF";
	erro_messages[ERR_THEN] = "SYNTAX ERROR, EXPECTED THEN";
	erro_messages[ERR_WHILE] = "SYNTAX ERROR, EXPECTED WHILE";
	erro_messages[ERR_DO] = "SYNTAX ERROR, EXPECTED DO";
	erro_messages[ERR_READ] = "SYNTAX ERROR, EXPECTED READ";
	erro_messages[ERR_LEFT_PARENT] = "SYNTAX ERROR, EXPECTED LEFT_PARENT";
	erro_messages[ERR_RIGHT_PARENT] = "SYNTAX ERROR, EXPECTED RIGHT_PARENT";
	erro_messages[ERR_WRITE] = "SYNTAX ERROR, EXPECTED WRITE";
	erro_messages[ERR_AFFECT] = "SYNTAX ERROR, EXPECTED AFFECT";
	erro_messages[ERR_DIFF] = "SYNTAX ERROR, EXPECTED DIFF";
	erro_messages[ERR_LESS] = "SYNTAX ERROR, EXPECTED LESS";
	erro_messages[ERR_GREATER] = "SYNTAX ERROR, EXPECTED GREATER";
	erro_messages[ERR_LESS_EQ] = "SYNTAX ERROR, EXPECTED LESS_EQ";
	erro_messages[ERR_GREATER_EQ] = "SYNTAX ERROR, EXPECTED GREATER_EQ";
	erro_messages[ERR_PLUS] = "SYNTAX ERROR, EXPECTED PLUS OR MINUS OPERATORS";
	erro_messages[ERR_MINUS] = "SYNTAX ERROR, EXPECTED PLUS OR MINUS OPERATORS";
	erro_messages[ERR_MULT] = "SYNTAX ERROR, EXPECTED MULT OR DIV OPERATORS";
	erro_messages[ERR_DIV] = "SYNTAX ERROR, EXPECTED MULTIPLICATION OR DIVISION OPERATORS";
	erro_messages[ERR_COMPARISON] = "SYNTAX ERROR, EXPECTED COMPARISON OPERATORS";

}